$date
	Thu Jul 25 03:29:41 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module executetb $end
$var wire 1 ! zero_flag $end
$var wire 16 " result [15:0] $end
$var wire 1 # parity_flag $end
$var wire 1 $ carry_flag $end
$var wire 1 % ac_flag $end
$var reg 1 & am $end
$var reg 1 ' clk $end
$var reg 1 ( enable $end
$var reg 6 ) instr_mem_addr [5:0] $end
$var reg 4 * mem_addr [3:0] $end
$var reg 5 + opcode [4:0] $end
$var reg 3 , rd [2:0] $end
$var reg 1 - reset $end
$var reg 3 . rs1 [2:0] $end
$var reg 3 / rs2 [2:0] $end
$var reg 3 0 s_r_amount [2:0] $end
$scope module dut $end
$var wire 1 & am $end
$var wire 1 ' clk $end
$var wire 1 ( enable $end
$var wire 6 1 instr_mem_addr [5:0] $end
$var wire 4 2 mem_addr [3:0] $end
$var wire 5 3 opcode [4:0] $end
$var wire 3 4 rd [2:0] $end
$var wire 16 5 rd_data [15:0] $end
$var wire 1 - reset $end
$var wire 3 6 rs1 [2:0] $end
$var wire 3 7 rs2 [2:0] $end
$var wire 3 8 s_r_amount [2:0] $end
$var wire 8 9 rs2_data [7:0] $end
$var wire 8 : operand_1 [7:0] $end
$var wire 8 ; mem_data [7:0] $end
$var reg 1 % ac_flag $end
$var reg 1 $ carry_flag $end
$var reg 3 < mux_1_out [2:0] $end
$var reg 8 = operand_2 [7:0] $end
$var reg 1 # parity_flag $end
$var reg 16 > result [15:0] $end
$var reg 8 ? temp [7:0] $end
$var reg 1 ! zero_flag $end
$var integer 32 @ i [31:0] $end
$scope module m1 $end
$var wire 1 ' clk $end
$var wire 4 A mem_addr_in [3:0] $end
$var wire 4 B mem_addr_out [3:0] $end
$var wire 8 C mem_data_in [7:0] $end
$var wire 1 D r_w $end
$var wire 1 E reset $end
$var reg 8 F mem_data_out [7:0] $end
$var integer 32 G i [31:0] $end
$upscope $end
$scope module r1 $end
$var wire 1 H input_length $end
$var wire 1 I r_w $end
$var wire 3 J rd_addr [2:0] $end
$var wire 16 K rd_data [15:0] $end
$var wire 1 L reset $end
$var wire 3 M rs1_addr [2:0] $end
$var wire 3 N rs2_addr [2:0] $end
$var reg 8 O rs1_data [7:0] $end
$var reg 8 P rs2_data [7:0] $end
$var integer 32 Q i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 Q
bx P
bx O
bx N
bx M
0L
bz K
bx J
1I
xH
bx G
bx F
0E
1D
b0 C
bx B
b0 A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bz 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
bx .
x-
bx ,
bx +
bx *
bx )
x(
0'
x&
x%
x$
x#
bx "
x!
$end
#2000
b100011 "
b100011 >
b111 =
b101 :
b101 O
b111 9
b111 P
0!
b101 <
b101 M
b10000 @
1#
0-
1(
bz *
bz 2
bz B
b111 /
b111 7
b111 N
b0z 0
b0z 8
b101 .
b101 6
b100 ,
b100 4
b100 J
0&
b11 +
b11 3
#5000
1'
#7000
0$
bx00001100 "
bx00001100 >
b1000 @
0#
0%
bx1100 ?
b1 +
b1 3
#10000
0'
#12000
bx00000010 "
bx00000010 >
1#
b1000 @
b1010 +
b1010 3
#15000
1'
#17000
bx =
bx :
bx O
bx 9
bx P
b0xxxxxxxx "
b0xxxxxxxx >
bz <
bz M
bz /
bz 7
bz N
bz 0
bz 8
bz .
bz 6
bz ,
bz 4
bz J
b1110 +
b1110 3
#20000
0'
#22000
bx "
bx >
b100 ,
b100 4
b100 J
b1011 +
b1011 3
#25000
1'
#27000
bx00001110 "
bx00001110 >
b111 :
b111 O
b111 <
b111 M
1#
b1000 @
b1110 ?
b1 0
b1 8
b111 ,
b111 4
b111 J
b10100 +
b10100 3
#30000
0'
#32000
b1000 @
1#
b10010 +
b10010 3
#35000
1'
#37000
b1000 @
1#
b10000 +
b10000 3
#40000
0'
#42000
bx00001000 "
bx00001000 >
b1000 @
1#
b1000 ?
bz 0
bz 8
b101 +
b101 3
#45000
1'
#47000
bx :
bx O
b0xxxxxxxx "
b0xxxxxxxx >
bz <
bz M
b1000 @
x#
bz ,
bz 4
bz J
z&
b11111 +
b11111 3
#50000
0'
#55000
1'
#60000
0'
#65000
1'
#70000
0'
#75000
1'
#80000
0'
#85000
1'
#90000
0'
#95000
1'
#97000
